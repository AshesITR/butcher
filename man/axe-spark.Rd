% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spark.R
\name{axe-spark}
\alias{axe-spark}
\alias{axe_call.ml_model}
\alias{axe_ctrl.ml_model}
\alias{axe_data.ml_model}
\alias{axe_env.ml_model}
\alias{axe_fitted.ml_model}
\alias{axe_env.ml_pipeline_model}
\alias{axe_env.ml_pipeline}
\alias{axe_env.ml_pipeline_stage}
\alias{axe_env.ml_summary}
\title{Axing a spark object.}
\usage{
\method{axe_call}{ml_model}(x, ...)

\method{axe_ctrl}{ml_model}(x, ...)

\method{axe_data}{ml_model}(x, ...)

\method{axe_env}{ml_model}(x, ...)

\method{axe_fitted}{ml_model}(x, ...)

\method{axe_env}{ml_pipeline_model}(x, ...)

\method{axe_env}{ml_pipeline}(x, ...)

\method{axe_env}{ml_pipeline_stage}(x, ...)

\method{axe_env}{ml_summary}(x, ...)
}
\arguments{
\item{x}{model object}

\item{...}{any additional arguments related to axing}
}
\value{
axed model object
}
\description{
spark objects are created from the \pkg{sparklyr} package,
a \R interface for Apache Spark. The axe methods available
for spark objects are designed such that interoperability
is maintained. In other words, for a multilingual machine
learning team, butchered spark objects instantiated from
\pkg{sparklyr} can still be serialized to disk, work in
Python, be deployed on Scala, etc. It is also worth noting
here that spark objects created from \pkg{sparklyr} have a
lot of metadata attached to it, including but not limited
to the formula, dataset, model, index labels, etc. The
axe functions provided are for parsing down the model
object both prior saving to disk, or loading from disk.
Traditional \R save functions are not available for these
objects, so functionality is provided in \code{sparklyr::ml_save}.
This function gives the user the option to keep either the
\code{pipeline_model} or the \code{pipeline}, so both of these
objects are retained from butchering, yet removal of one or the
other might be conducive to freeing up memory on disk.
}
